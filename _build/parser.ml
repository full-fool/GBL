type token =
  | COMMENT
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | LANGLE
  | RANGLE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULE
  | ASSIGN
  | NOT
  | EQ
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MODULEEQ
  | NEQ
  | LEQ
  | GEQ
  | AND
  | OR
  | RIGHTSHIFT
  | LEFTSHIFT
  | DOMAINOP
  | BITAND
  | BITOR
  | BITXOR
  | BITNEG
  | NEWLINE
  | FOR
  | IF
  | ELSE
  | ELIF
  | BREAK
  | CONTINUE
  | WHILE
  | RETURN
  | END
  | INT
  | BOOL
  | FLOAT
  | STRING
  | GAME
  | PLAYER
  | SPRITE
  | MAP
  | INTARRAY
  | FLOATARRAY
  | BOOLARRAY
  | STRINGARRAY
  | VOID
  | TRUE
  | FALSE
  | GT
  | LT
  | STRUCT
  | CLASS
  | EXTENDS
  | LITERAL of (int)
  | FLOATCONSTANT of (float)
  | STRINGCONSTANT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 79 "parser.ml"
let yytransl_const = [|
  257 (* COMMENT *);
  258 (* SEMI *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACK *);
  262 (* RBRACK *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LANGLE *);
  266 (* RANGLE *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MODULE *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* PLUSEQ *);
  277 (* MINUSEQ *);
  278 (* TIMESEQ *);
  279 (* DIVIDEEQ *);
  280 (* MODULEEQ *);
  281 (* NEQ *);
  282 (* LEQ *);
  283 (* GEQ *);
  284 (* AND *);
  285 (* OR *);
  286 (* RIGHTSHIFT *);
  287 (* LEFTSHIFT *);
  288 (* DOMAINOP *);
  289 (* BITAND *);
  290 (* BITOR *);
  291 (* BITXOR *);
  292 (* BITNEG *);
  293 (* NEWLINE *);
  294 (* FOR *);
  295 (* IF *);
  296 (* ELSE *);
  297 (* ELIF *);
  298 (* BREAK *);
  299 (* CONTINUE *);
  300 (* WHILE *);
  301 (* RETURN *);
  302 (* END *);
  303 (* INT *);
  304 (* BOOL *);
  305 (* FLOAT *);
  306 (* STRING *);
  307 (* GAME *);
  308 (* PLAYER *);
  309 (* SPRITE *);
  310 (* MAP *);
  311 (* INTARRAY *);
  312 (* FLOATARRAY *);
  313 (* BOOLARRAY *);
  314 (* STRINGARRAY *);
  315 (* VOID *);
  316 (* TRUE *);
  317 (* FALSE *);
  318 (* GT *);
  319 (* LT *);
  320 (* STRUCT *);
  321 (* CLASS *);
  322 (* EXTENDS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  323 (* LITERAL *);
  324 (* FLOATCONSTANT *);
  325 (* STRINGCONSTANT *);
  326 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\006\000\006\000\007\000\003\000\003\000\
\009\000\009\000\010\000\004\000\004\000\011\000\011\000\005\000\
\005\000\013\000\013\000\012\000\015\000\015\000\017\000\017\000\
\014\000\014\000\018\000\018\000\018\000\018\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\016\000\016\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\021\000\021\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\023\000\022\000\022\000\024\000\
\024\000\000\000"

let yylen = "\002\000\
\005\000\000\000\001\000\001\000\002\000\003\000\000\000\001\000\
\001\000\002\000\006\000\000\000\001\000\001\000\002\000\000\000\
\001\000\001\000\002\000\008\000\000\000\001\000\002\000\004\000\
\005\000\007\000\000\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\002\000\002\000\003\000\
\002\000\002\000\003\000\005\000\007\000\009\000\005\000\005\000\
\001\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\006\000\004\000\003\000\004\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\031\000\032\000\033\000\034\000\036\000\037\000\
\038\000\039\000\040\000\042\000\041\000\043\000\035\000\090\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\009\000\
\005\000\000\000\000\000\000\000\000\000\014\000\000\000\010\000\
\006\000\000\000\000\000\000\000\018\000\000\000\015\000\000\000\
\000\000\001\000\019\000\000\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\000\000\
\011\000\025\000\028\000\000\000\029\000\030\000\027\000\044\000\
\000\000\000\000\000\000\000\000\024\000\026\000\000\000\044\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\065\000\061\000\062\000\063\000\000\000\057\000\000\000\
\058\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\050\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\051\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\053\000\000\000\054\000"

let yydgoto = "\002\000\
\016\000\017\000\021\000\027\000\035\000\018\000\087\000\088\000\
\023\000\089\000\029\000\062\000\036\000\037\000\049\000\068\000\
\050\000\052\000\090\000\091\000\122\000\127\000\000\000\128\000"

let yysindex = "\014\000\
\008\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\001\008\001\000\000\206\254\008\001\210\254\008\001\000\000\
\000\000\054\255\248\254\244\254\008\001\000\000\057\255\000\000\
\000\000\247\254\073\000\248\254\000\000\078\255\000\000\015\255\
\006\255\000\000\000\000\008\001\079\255\000\000\019\255\022\255\
\083\255\086\255\094\255\225\000\113\255\000\000\115\255\008\001\
\000\000\000\000\000\000\060\255\000\000\000\000\000\000\000\000\
\070\255\116\255\021\001\056\255\000\000\000\000\068\255\000\000\
\000\000\068\255\141\255\142\255\149\255\155\255\156\255\009\255\
\000\000\000\000\000\000\000\000\000\000\085\255\000\000\073\255\
\000\000\000\000\112\000\197\000\124\255\235\254\068\255\068\255\
\000\000\000\000\068\255\000\000\133\000\068\255\091\255\068\255\
\017\255\000\000\068\255\068\255\068\255\068\255\068\255\068\255\
\068\255\068\255\068\255\068\255\068\255\068\255\000\000\000\000\
\025\001\158\255\224\000\242\000\000\000\025\001\157\255\153\255\
\159\255\025\001\068\255\003\255\003\255\235\254\235\254\078\001\
\078\001\140\255\140\255\070\001\254\255\025\001\025\001\068\255\
\034\000\034\000\000\000\068\255\170\255\151\000\179\000\130\255\
\000\000\025\001\068\255\000\000\068\255\034\000\025\001\185\255\
\000\000\034\000\000\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\003\000\000\000\000\000\004\000\000\000\005\000\000\000\
\000\000\000\000\190\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\198\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\255\000\000\000\000\000\000\000\000\
\000\000\201\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\001\213\255\000\000\
\000\000\000\000\000\000\000\000\000\000\223\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\255\000\000\000\000\000\000\000\000\010\255\000\000\224\255\
\000\000\137\255\000\000\162\001\181\001\124\001\143\001\028\000\
\223\001\193\001\212\001\184\255\026\255\145\255\214\255\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\000\000\193\255\
\000\000\025\255\000\000\000\000\225\255\000\000\215\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\254\000\
\000\000\016\000\000\000\235\255\000\000\194\000\000\000\161\000\
\000\000\171\000\244\255\192\255\082\000\000\000\000\000\000\000"

let yytablesize = 764
let yytable = "\030\000\
\002\000\007\000\003\000\012\000\008\000\013\000\092\000\039\000\
\019\000\094\000\100\000\071\000\046\000\088\000\001\000\101\000\
\109\000\110\000\033\000\026\000\088\000\040\000\060\000\031\000\
\060\000\025\000\074\000\079\000\089\000\079\000\121\000\123\000\
\024\000\131\000\124\000\089\000\079\000\126\000\032\000\130\000\
\117\000\118\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\079\000\033\000\
\034\000\038\000\071\000\059\000\041\000\040\000\072\000\073\000\
\117\000\118\000\150\000\061\000\081\000\082\000\071\000\047\000\
\042\000\074\000\059\000\083\000\084\000\085\000\086\000\151\000\
\044\000\045\000\061\000\154\000\051\000\074\000\055\000\102\000\
\053\000\103\000\159\000\054\000\121\000\075\000\076\000\057\000\
\056\000\077\000\078\000\079\000\080\000\104\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\081\000\082\000\033\000\044\000\063\000\
\040\000\064\000\083\000\084\000\085\000\086\000\071\000\081\000\
\082\000\066\000\072\000\120\000\152\000\153\000\083\000\084\000\
\085\000\086\000\081\000\069\000\081\000\074\000\105\000\095\000\
\096\000\161\000\076\000\081\000\076\000\163\000\097\000\107\000\
\108\000\109\000\110\000\076\000\098\000\129\000\099\000\144\000\
\147\000\075\000\076\000\148\000\149\000\077\000\078\000\079\000\
\080\000\158\000\003\000\004\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\081\000\
\082\000\078\000\155\000\078\000\162\000\016\000\083\000\084\000\
\085\000\086\000\078\000\052\000\066\000\017\000\066\000\052\000\
\052\000\117\000\118\000\021\000\022\000\066\000\066\000\066\000\
\066\000\066\000\052\000\078\000\078\000\066\000\059\000\074\000\
\082\000\074\000\082\000\066\000\066\000\066\000\066\000\066\000\
\074\000\082\000\086\000\087\000\059\000\043\000\052\000\052\000\
\093\000\067\000\052\000\052\000\052\000\052\000\160\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\020\000\000\000\
\066\000\066\000\000\000\052\000\052\000\052\000\052\000\000\000\
\000\000\107\000\108\000\109\000\110\000\000\000\022\000\020\000\
\111\000\000\000\028\000\000\000\022\000\000\000\112\000\113\000\
\114\000\115\000\028\000\000\000\000\000\072\000\000\000\072\000\
\000\000\000\000\000\000\000\000\071\000\000\000\072\000\000\000\
\072\000\048\000\000\000\000\000\000\000\000\000\072\000\000\000\
\000\000\060\000\000\000\074\000\072\000\065\000\000\000\072\000\
\072\000\000\000\000\000\117\000\118\000\000\000\000\000\000\000\
\060\000\002\000\007\000\003\000\012\000\008\000\013\000\075\000\
\076\000\000\000\000\000\077\000\078\000\079\000\080\000\000\000\
\003\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\015\000\081\000\082\000\067\000\
\000\000\067\000\000\000\000\000\083\000\084\000\085\000\086\000\
\067\000\067\000\067\000\067\000\067\000\000\000\000\000\000\000\
\067\000\106\000\000\000\000\000\000\000\000\000\067\000\067\000\
\067\000\067\000\067\000\107\000\108\000\109\000\110\000\000\000\
\000\000\000\000\111\000\000\000\000\000\000\000\125\000\000\000\
\112\000\113\000\114\000\115\000\116\000\000\000\000\000\000\000\
\107\000\108\000\109\000\110\000\000\000\000\000\000\000\111\000\
\156\000\000\000\000\000\067\000\067\000\112\000\113\000\114\000\
\115\000\116\000\107\000\108\000\109\000\110\000\000\000\000\000\
\000\000\111\000\000\000\000\000\000\000\117\000\118\000\112\000\
\113\000\114\000\115\000\116\000\157\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\107\000\108\000\
\109\000\110\000\117\000\118\000\000\000\111\000\000\000\000\000\
\119\000\000\000\000\000\112\000\113\000\114\000\115\000\116\000\
\107\000\108\000\109\000\110\000\117\000\118\000\000\000\111\000\
\000\000\000\000\000\000\000\000\000\000\112\000\113\000\114\000\
\115\000\116\000\000\000\145\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\107\000\108\000\109\000\110\000\000\000\
\117\000\118\000\111\000\000\000\000\000\146\000\000\000\000\000\
\112\000\113\000\114\000\115\000\116\000\107\000\108\000\109\000\
\110\000\000\000\117\000\118\000\111\000\000\000\000\000\000\000\
\000\000\000\000\112\000\113\000\114\000\115\000\116\000\003\000\
\004\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\015\000\070\000\117\000\118\000\000\000\
\000\000\000\000\000\000\000\000\107\000\108\000\109\000\110\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\117\000\
\118\000\112\000\113\000\114\000\115\000\116\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\000\000\107\000\108\000\109\000\110\000\000\000\117\000\118\000\
\111\000\107\000\108\000\109\000\110\000\000\000\112\000\113\000\
\114\000\080\000\000\000\080\000\000\000\000\000\000\000\113\000\
\114\000\000\000\080\000\080\000\080\000\080\000\080\000\000\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\080\000\080\000\080\000\080\000\080\000\070\000\000\000\070\000\
\000\000\000\000\000\000\117\000\118\000\000\000\070\000\070\000\
\070\000\070\000\070\000\117\000\118\000\000\000\070\000\000\000\
\071\000\000\000\071\000\000\000\070\000\070\000\070\000\070\000\
\070\000\071\000\071\000\071\000\071\000\071\000\000\000\000\000\
\000\000\071\000\000\000\068\000\000\000\068\000\000\000\071\000\
\071\000\071\000\071\000\071\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\068\000\000\000\069\000\000\000\
\069\000\000\000\068\000\068\000\068\000\068\000\068\000\069\000\
\069\000\069\000\075\000\000\000\075\000\000\000\000\000\069\000\
\000\000\000\000\000\000\075\000\000\000\069\000\069\000\069\000\
\069\000\069\000\000\000\075\000\000\000\077\000\000\000\077\000\
\000\000\075\000\075\000\075\000\075\000\075\000\077\000\000\000\
\073\000\000\000\073\000\000\000\000\000\000\000\077\000\000\000\
\000\000\073\000\000\000\000\000\077\000\077\000\077\000\077\000\
\077\000\073\000\000\000\000\000\000\000\000\000\000\000\073\000\
\000\000\000\000\073\000\073\000"

let yycheck = "\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\029\000\
\001\000\074\000\002\001\003\001\007\001\004\001\001\000\080\000\
\014\001\015\001\002\001\070\001\011\001\005\001\002\001\070\001\
\004\001\018\000\018\001\002\001\004\001\004\001\095\000\096\000\
\017\000\017\001\099\000\011\001\011\001\102\000\023\000\104\000\
\062\001\063\001\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\029\001\002\001\
\065\001\070\001\003\001\052\000\070\001\005\001\007\001\008\001\
\062\001\063\001\131\000\052\000\060\001\061\001\003\001\066\001\
\000\000\018\001\067\000\067\001\068\001\069\001\070\001\144\000\
\003\001\067\001\067\000\148\000\006\001\018\001\004\001\003\001\
\070\001\005\001\155\000\070\001\157\000\038\001\039\001\002\001\
\011\001\042\001\043\001\044\001\045\001\017\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\002\001\003\001\007\001\
\005\001\007\001\067\001\068\001\069\001\070\001\003\001\060\001\
\061\001\070\001\007\001\008\001\145\000\146\000\067\001\068\001\
\069\001\070\001\002\001\070\001\004\001\018\001\070\001\003\001\
\003\001\158\000\002\001\011\001\004\001\162\000\002\001\012\001\
\013\001\014\001\015\001\011\001\002\001\067\001\003\001\002\001\
\004\001\038\001\039\001\011\001\006\001\042\001\043\001\044\001\
\045\001\040\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\002\001\017\001\004\001\004\001\000\000\067\001\068\001\
\069\001\070\001\011\001\003\001\002\001\000\000\004\001\007\001\
\008\001\062\001\063\001\004\001\004\001\011\001\012\001\013\001\
\014\001\015\001\018\001\028\001\029\001\019\001\002\001\002\001\
\002\001\004\001\004\001\025\001\026\001\027\001\028\001\029\001\
\011\001\011\001\004\001\004\001\004\001\036\000\038\001\039\001\
\072\000\063\000\042\001\043\001\044\001\045\001\157\000\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\001\000\255\255\
\062\001\063\001\255\255\067\001\068\001\069\001\070\001\255\255\
\255\255\012\001\013\001\014\001\015\001\255\255\017\000\018\000\
\019\001\255\255\021\000\255\255\023\000\255\255\025\001\026\001\
\027\001\028\001\029\000\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\003\001\255\255\011\001\255\255\
\007\001\044\000\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\052\000\255\255\018\001\025\001\056\000\255\255\028\001\
\029\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\000\065\001\065\001\065\001\065\001\065\001\065\001\038\001\
\039\001\255\255\255\255\042\001\043\001\044\001\045\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\002\001\
\255\255\004\001\255\255\255\255\067\001\068\001\069\001\070\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\019\001\002\001\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\002\001\255\255\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\019\001\
\002\001\255\255\255\255\062\001\063\001\025\001\026\001\027\001\
\028\001\029\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\062\001\063\001\025\001\
\026\001\027\001\028\001\029\001\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\062\001\063\001\255\255\019\001\255\255\255\255\
\004\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\012\001\013\001\014\001\015\001\062\001\063\001\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\004\001\255\255\255\255\255\255\255\255\
\008\001\255\255\255\255\012\001\013\001\014\001\015\001\255\255\
\062\001\063\001\019\001\255\255\255\255\004\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\012\001\013\001\014\001\
\015\001\255\255\062\001\063\001\019\001\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\008\001\062\001\063\001\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\062\001\
\063\001\025\001\026\001\027\001\028\001\029\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\255\255\012\001\013\001\014\001\015\001\255\255\062\001\063\001\
\019\001\012\001\013\001\014\001\015\001\255\255\025\001\026\001\
\027\001\002\001\255\255\004\001\255\255\255\255\255\255\026\001\
\027\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\002\001\255\255\004\001\
\255\255\255\255\255\255\062\001\063\001\255\255\011\001\012\001\
\013\001\014\001\015\001\062\001\063\001\255\255\019\001\255\255\
\002\001\255\255\004\001\255\255\025\001\026\001\027\001\028\001\
\029\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\019\001\255\255\002\001\255\255\004\001\255\255\025\001\
\026\001\027\001\028\001\029\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\002\001\255\255\
\004\001\255\255\025\001\026\001\027\001\028\001\029\001\011\001\
\012\001\013\001\002\001\255\255\004\001\255\255\255\255\019\001\
\255\255\255\255\255\255\011\001\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\019\001\255\255\002\001\255\255\004\001\
\255\255\025\001\026\001\027\001\028\001\029\001\011\001\255\255\
\002\001\255\255\004\001\255\255\255\255\255\255\019\001\255\255\
\255\255\011\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\255\255\028\001\029\001"

let yynames_const = "\
  COMMENT\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  LANGLE\000\
  RANGLE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MODULEEQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  AND\000\
  OR\000\
  RIGHTSHIFT\000\
  LEFTSHIFT\000\
  DOMAINOP\000\
  BITAND\000\
  BITOR\000\
  BITXOR\000\
  BITNEG\000\
  NEWLINE\000\
  FOR\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  BREAK\000\
  CONTINUE\000\
  WHILE\000\
  RETURN\000\
  END\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  GAME\000\
  PLAYER\000\
  SPRITE\000\
  MAP\000\
  INTARRAY\000\
  FLOATARRAY\000\
  BOOLARRAY\000\
  STRINGARRAY\000\
  VOID\000\
  TRUE\000\
  FALSE\000\
  GT\000\
  LT\000\
  STRUCT\000\
  CLASS\000\
  EXTENDS\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOATCONSTANT\000\
  STRINGCONSTANT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'vdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'array_decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fdecls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cdecls) in
    Obj.repr(
# 70 "parser.mly"
                                       ( Program(_1, _2, _3, _4) )
# 548 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                    ( [] )
# 554 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 74 "parser.mly"
               ( List.rev _1 )
# 561 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 77 "parser.mly"
             ( [_1] )
# 568 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 78 "parser.mly"
                     ( _2 :: _1 )
# 576 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 81 "parser.mly"
               ( (_1, _2) )
# 584 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                    ( [] )
# 590 "parser.ml"
               : 'array_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_decl_list) in
    Obj.repr(
# 86 "parser.mly"
                    ( List.rev _1 )
# 597 "parser.ml"
               : 'array_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_decl) in
    Obj.repr(
# 89 "parser.mly"
                 ( [_1] )
# 604 "parser.ml"
               : 'array_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'array_decl) in
    Obj.repr(
# 90 "parser.mly"
                               ( _2 :: _1 )
# 612 "parser.ml"
               : 'array_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 93 "parser.mly"
                                     ((_1, _2, _4))
# 621 "parser.ml"
               : 'array_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                    ( [] )
# 627 "parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl_list) in
    Obj.repr(
# 97 "parser.mly"
               ( List.rev _1 )
# 634 "parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 100 "parser.mly"
            ( [_1] )
# 641 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 101 "parser.mly"
                     ( _2 :: _1 )
# 649 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                    ( [] )
# 655 "parser.ml"
               : 'cdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl_list) in
    Obj.repr(
# 105 "parser.mly"
               ( List.rev _1 )
# 662 "parser.ml"
               : 'cdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 108 "parser.mly"
            ( [_1] )
# 669 "parser.ml"
               : 'cdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 109 "parser.mly"
                     ( _2 :: _1 )
# 677 "parser.ml"
               : 'cdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 117 "parser.mly"
     ( { typ = _1;
   fname = _2;
   formals = _4;
   body = List.rev _7 } )
# 690 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
                  ( [] )
# 696 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 125 "parser.mly"
                  ( List.rev _1 )
# 703 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
                             ( [(_1,_2)] )
# 711 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                             ( (_3,_4) :: _1 )
# 720 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    Obj.repr(
# 136 "parser.mly"
                                 ({
      cname = _2;
      extends = NoParent;
      cbody = _4;
    })
# 732 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    Obj.repr(
# 141 "parser.mly"
                                            ({
      cname = _2;
      extends = Parent(_4);
      cbody = _6;
    })
# 745 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                    ( { 
      vdecls = [];
      array_decls = [];
      methods = [];
    } )
# 755 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 153 "parser.mly"
                  ( { 
      vdecls = _2 :: _1.vdecls;
      array_decls = _1.array_decls;
      methods = _1.methods;
    } )
# 767 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'array_decl) in
    Obj.repr(
# 158 "parser.mly"
                       ( { 
      vdecls = _1.vdecls;
      array_decls = _2 :: _1.array_decls;
      methods = _1.methods;
    } )
# 779 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 163 "parser.mly"
                  ( { 
      vdecls = _1.vdecls;
      array_decls = _1.array_decls;
      methods = _2 :: _1.methods;
    } )
# 791 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
                ( Int         )
# 797 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parser.mly"
                ( Bool        )
# 803 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
                ( Float       )
# 809 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                ( String      )
# 815 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
                ( Void        )
# 821 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
                ( Game        )
# 827 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
                ( Player      )
# 833 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser.mly"
                ( Sprite      )
# 839 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
                ( Map         )
# 845 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
                ( IntArray    )
# 851 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                ( BoolArray   )
# 857 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "parser.mly"
                ( FloatArray  )
# 863 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "parser.mly"
                ( StringArray )
# 869 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "parser.mly"
                   ( [] )
# 875 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 195 "parser.mly"
                   ( _2 :: _1 )
# 883 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
            ( Expr _1 )
# 890 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "parser.mly"
                ( Return Noexpr )
# 896 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                     ( Return _2 )
# 903 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
               (Break)
# 909 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
                  (Continue)
# 915 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 204 "parser.mly"
                            ( Block(List.rev _2) )
# 922 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 205 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 930 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 206 "parser.mly"
                                            ( If(_3, _5, _7) )
# 939 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 208 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 949 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 209 "parser.mly"
                                  ( While(_3, _5) )
# 957 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
                            (Init(_1, _2, _4))
# 966 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 211 "parser.mly"
          (Bind _1)
# 973 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_decl) in
    Obj.repr(
# 212 "parser.mly"
               (ArrayBind _1)
# 980 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
                  ( Noexpr )
# 986 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "parser.mly"
                  ( _1 )
# 993 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 225 "parser.mly"
                     ( Literal(_1)          )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 226 "parser.mly"
                     ( FloatLit(_1)         )
# 1007 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 227 "parser.mly"
                     ( StringLit(_1)        )
# 1014 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
                     ( BoolLit(true)        )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "parser.mly"
                     ( BoolLit(false)       )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 230 "parser.mly"
                     ( Id(_1)               )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 231 "parser.mly"
                             (ArrayElement(_1, _3))
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 232 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 233 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "parser.mly"
                     ( Binop(_1, Is, _3) )
# 1081 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 238 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1105 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 1113 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1121 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 1129 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 243 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 244 "parser.mly"
                     ( Unop(Not, _2) )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 245 "parser.mly"
                     ( Assign(_1, _3) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 246 "parser.mly"
                                          (ArrayElementAssign(_1, _3, _6))
# 1161 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 247 "parser.mly"
                                 ( Call(_1, _3) )
# 1169 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 248 "parser.mly"
                       ( _2 )
# 1176 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 251 "parser.mly"
                     ((_1, _2, _4))
# 1185 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "parser.mly"
                  ( [] )
# 1191 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 257 "parser.mly"
                  ( List.rev _1 )
# 1198 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 260 "parser.mly"
                            ( [_1] )
# 1205 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 261 "parser.mly"
                            ( _3 :: _1 )
# 1213 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
